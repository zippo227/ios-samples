{"Name":"Firebase Analytics for iOS","Id":3259,"Alias":"firebaseiosanalytics","Description":"Firebase Analytics is a free app measurement solution that provides insight on app usage and user engagement.\n\n## Key capabilities\n\n* **Unlimited Reporting:**\tFirebase Analytics provides unlimited reporting on up to 500 distinct events.\n* **Audience Segmentation:** Custom audiences can be defined in the Firebase console based on device data, custom events, or user properties. These audiences can be used with other Firebase features when targeting new features or notifications.\n\n## How does it work?\n\nFirebase Analytics helps you understand how people use your iOS app. The SDK automatically captures a number of events and user properties and also allows you to define your own custom events to measure the things that uniquely matter to your business. Once the data is captured, it\u0027s available in a dashboard through the Firebase console. This dashboard provides detailed insights about your data â€” from summary data such as active users and demographics, to more detailed data such as identifying your most purchased items.\n\nFirebase Analytics helps you understand how your users behave, so you can make informed decisions about how to market your app. See the performance of your campaigns across organic and paid channels to understand which methods are most effective at driving high-value users. If you need to perform custom analysis or join your data with other sources you can link your Analytics data to BigQuery, which allows for more complex analysis like querying large data sets and joining multiple data sources.\n\n\u003csub\u003e_Portions of this page are modifications based on work created and [shared by Google](https://developers.google.com/readme/policies/) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/). Click [here](https://firebase.google.com/docs/analytics/) to see original Firebase documentation._\u003c/sub\u003e\n","Version":"3.6.0.1","Summary":"Firebase Analytics is a free app measurement solution that provides insight on app usage and user engagement.","QuickStart":"# Get Started with Firebase Analytics for iOS\n\nFirebase Analytics collects usage and behavior data for your app. The SDK logs two primary types of information:\n\n* **Events:** What is happening in your app, such as user actions, system events, or errors.\n* **User properties:** Attributes you define to describe segments of your userbase, such as language preference or geographic location.\n\n## Add Firebase to your app\n\n1. Create a Firebase project in the [Firebase console][1], if you don\u0027t already have one. If you already have an existing Google project associated with your mobile app, click **Import Google Project**. Otherwise, click **Create New Project**.\n2. Click **Add Firebase to your iOS app** and follow the setup steps. If you\u0027re importing an existing Google project, this may happen automatically and you can just [download the config file][2].\n3. When prompted, enter your app\u0027s bundle ID. It\u0027s important to enter the bundle ID your app is using; this can only be set when you add an app to your Firebase project.\n4. At the end, you\u0027ll download a `GoogleService-Info.plist` file. You can [download this file][2] again at any time.\n\n## Configure Analytics in your app\n\nOnce you have your `GoogleService-Info.plist` file downloaded in your computer, do the following steps in Xamarin Studio:\n\n1. Add `GoogleService-Info.plist` file to your app project.\n2. Set `GoogleService-Info.plist` **build action** behaviour to `Bundle Resource` by Right clicking/Build Action.\n3. Open `GoogleService-Info.plist` file and change `IS_ANALYTICS_ENABLED` value to `Yes`. \n4. Add the following line of code somewhere in your app, typically in your AppDelegate\u0027s `FinishedLaunching` method (don\u0027t forget to import `Firebase.Analytics` namespace):\n\n```csharp\nApp.Configure ();\n```\n\n## Log events\n\nEvents provide insight on what is happening in your app, such as user actions, system events, or errors.\n\nAnalytics automatically logs some [events][3] for you; you don\u0027t need to add any code to receive them. If your app needs to collect additional data, you can log up to 500 different Analytics Event types in your app. There is no limit on the total volume of events your app logs.\n\nAfter you have configured Analytics in your app, you can begin to log events with the `Analytics.LogEvent` method. You can find some constants names ready to be used with your log:\n\n* Suggested events: see the `EventNamesConstants` class.\n* Prescribed parameters: see the `ParameterNamesConstants` class.\n\nIt is very easy to log an event, the following example demonstrates how to log an event with constants values (don\u0027t forget to import `Firebase.Analytics` namespace):\n\n```csharp\nNSString [] keys = { ParameterNamesConstants.ContentType, ParameterNamesConstants.ItemId };\nNSObject [] values = { new NSString (\"cont\"), new NSString (\"1\") };\nvar parameters = NSDictionary\u003cNSString, NSObject\u003e.FromObjectsAndKeys (keys, values, keys.Length);\nAnalytics.LogEvent (EventNamesConstants.SelectContent, parameters);\n```\n\nOr without constants values:\n\n```csharp\nNSString [] keys = { new NSString (\"Name\") };\nNSObject [] values = { new NSString (\"Image name\") };\nvar parameters = NSDictionary\u003cNSString, NSObject\u003e.FromObjectsAndKeys (keys, values, keys.Length);\nAnalytics.LogEvent (\"share_image\", parameters);\n```\n\nOne important thing to know about custom parameters is that they are not represented directly in your Analytics reports but they can be used as filters in [audience][4] definitions that can be applied to every report. Custom parameters are also included in data [exported to BigQuery][5] if your app is linked to a BigQuery project.\n\nAlso, `ParameterNamesConstants.Value` is a general purpose parameter that is useful for accumulating a key metric that pertains to an event. Examples include revenue, distance, time, and points.\n\n**_Note: Data logged to Analytics can take hours to be refreshed on reports._**\n\n## View events in the dashboard\n\nYou can view aggregrated statistics about your Analytics events in the Firebase console dashboards. These dashboards update periodically throughout the day.\n\nYou can access this data in the Firebase console as follows:\n\n1. In the [Firebase console][1], open your project.\n2. Select **Analytics** from the menu to view the Analytics reporting dashboard.\n\nThe **Events** tab shows the [event reports][10] that are automatically created for each distinct type of Analytics event logged by your app. Read more about the [Analytics reporting dashboard][11] in the Firebase Help Center.\n\n## Set User Properties\n\nUser properties are attributes you define to describe segments of your userbase, such as language preference or geographic location.\n\nAnalytics automatically logs some [user properties][6]; you don\u0027t need to add any code to enable them. If your app needs to collect additional data, you can set up to 25 different Analytics User Properties in your app.\n\n**_Note: The Age, Gender, and Interests properties are automatically collected only if your app links to the Ad Support framework. Linking to this framework also automatically collects the Advertising Identifier (IDFA)._**\n\nTo set a user property you need to:\n\n1. [Register][7] the property in the **Analytics** page of the [Firebase console][1].\n2. Add code to set an Analytics user property with the `Analytics.SetUserProperty` method. You can use the name and value of your choosing for each property (don\u0027t forget to import `Firebase.Analytics` namespace):\n\n```csharp\n// Pass null as value if you want to remove a registered user property\nAnalytics.SetUserProperty (\"your value\", \"your property name\");\n```\n\n***Note:*** *Once the property is registered, it can take several hours for data collected with the property to be included in reports. When the new data is available, the user property can be used as a report filter or audience definition.*\n\nYou can access this data in the Firebase console as follows:\n\n1. In the [Firebase console][1], open your project.\n2. Select **Analytics** from the menu to view the Analytics reporting dashboard.\n\nThe **User Properties** tab shows a list of user properties that you have defined for your app. You can use these properties as a filter on many of the reports available in Firebase Analytics. Read more about the [Analytics reporting dashboard][11] in the Firebase Help Center.\n\n### Known issues\n\n* App doesn\u0027t compile when `Incremental builds` is enabled. (Bug [#43689][8])\n* Passing `-FIRAnalyticsDebugEnabled` to Run arguments doesn\u0027t enable debug console. (Bug [#43899][9])\n\n\u003csub\u003e_Portions of this page are modifications based on work created and [shared by Google](https://developers.google.com/readme/policies/) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/). Click [here](https://firebase.google.com/docs/analytics/ios/start) to see original Firebase documentation._\u003c/sub\u003e\n\n[1]: https://firebase.google.com/console/\n[2]: http://support.google.com/firebase/answer/7015592\n[3]: https://support.google.com/firebase/answer/6317485\n[4]: https://support.google.com/firebase/answer/6317509?hl=en\u0026ref_topic=6317489\n[5]: https://support.google.com/firebase/answer/6318765\n[6]: https://support.google.com/firebase/answer/6317486\n[7]: https://support.google.com/firebase/answer/6317519?hl=en\u0026ref_topic=6317489#create-property\n[8]: https://bugzilla.xamarin.com/show_bug.cgi?id=43689\n[9]: https://bugzilla.xamarin.com/show_bug.cgi?id=43899\n[10]: https://support.google.com/firebase/answer/6317522?hl=en\u0026ref_topic=6317489\n[11]: https://support.google.com/firebase/answer/6317517?hl=en\u0026ref_topic=6317489\n","Hash":"57f0e761b4f621857d84e5d7528a0765","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}